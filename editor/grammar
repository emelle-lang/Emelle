{{
(* Copyright (C) 2019 TheAspiringHacker.

   This Source Code Form is subject to the terms of the Mozilla Public
   License, v. 2.0. If a copy of the MPL was not distributed with this
   file, You can obtain one at http://mozilla.org/MPL/2.0/. *)

open Base
open Js_of_ocaml
open Emmeline

module T =
  [%symbol
   type ident =
     | Local of Bexp.Widget.text_input
     | Qual of Bexp.Widget.text_input * Bexp.Widget.text_input

   type items =
     | ILet of (symbols, let_def) Bexp.hole * (symbols, items) Bexp.hole
     | ILet_rec of (symbols, let_rec) Bexp.hole * (symbols, items) Bexp.hole
     | ITypedefs of (symbols, typedef) Bexp.hole * (symbols, items) Bexp.hole

   and modul = {
       items : (symbols, items) Bexp.hole;
     }

   and let_def = {
       let_pat : (symbols, pat) Bexp.hole;
       let_expr : (symbols, expr) Bexp.hole;
       let_next : (symbols, let_def) Bexp.hole;
     }

   and let_rec = {
       let_rec_ident : Bexp.Widget.text_input;
       let_rec_expr : (symbols, expr) Bexp.hole;
       let_rec_next : (symbols, let_rec) Bexp.hole;
     }

   and expr =
     | EApp of bin_expr
     | EAssign of bin_expr
     | ECase of ((symbols, expr) Bexp.hole * (symbols, branch) Bexp.hole)
     | EConstr of (symbols, ident) Bexp.hole
     | ELam of ((symbols, pat) Bexp.hole * (symbols, expr) Bexp.hole)
     | ELet of ((symbols, let_def) Bexp.hole * (symbols, expr) Bexp.hole)
     | ELet_rec of ((symbols, let_rec) Bexp.hole * (symbols, expr) Bexp.hole)
     | ERef
     | ESeq of bin_expr
     | EUnit
     | EVar of (symbols, ident) Bexp.hole

   and bin_expr = (symbols, expr) Bexp.hole * (symbols, expr) Bexp.hole

   and pat =
     | PConstr of ((symbols, ident) Bexp.hole * (symbols, pat_list) Bexp.hole)
     | PRef of (symbols, pat) Bexp.hole
     | PUnit
     | PVar of Bexp.Widget.text_input
     | PWild

   and pat_list =
     PList of ((symbols, pat) Bexp.hole * (symbols, pat_list) Bexp.hole)

   and branch = {
       branch_pat : (symbols, pat) Bexp.hole;
       branch_expr : (symbols, expr) Bexp.hole;
       branch_next : (symbols, branch) Bexp.hole;
     }

   and typedef =
     | Adt of Bexp.Widget.text_input
              * (symbols, constr) Bexp.hole
              * (symbols, typedef) Bexp.hole

   and constr = {
       constr_name : Bexp.Widget.text_input;
       constr_ty : (symbols, product_ty) Bexp.hole;
       constr_next : (symbols, constr) Bexp.hole;
    }

   and product_ty = {
       prod_factor : (symbols, ty) Bexp.hole;
       prod_next : (symbols, product_ty) Bexp.hole;
     }

   and ty =
     | TApp of (symbols, ty) Bexp.hole * (symbols, ty) Bexp.hole
     | TArr
     | TNominal of (symbols, ident) Bexp.hole
     | TRef
     | TVar of Bexp.Widget.text_input
  ]

open T

let doc = Dom_svg.document

let ident_data =
  { Bexp.palette_name = "Name"
  ; palette_color = "purple" }

let modul_data =
  { Bexp.palette_name = "Module"
  ; palette_color = "lime" }

let items_data =
  { Bexp.palette_name = "Item"
  ; palette_color = "brown" }

let let_def_data =
  { Bexp.palette_name = "Let Defn"
  ; palette_color = "turquoise" }

let let_rec_data =
  { Bexp.palette_name = "Rec Defn"
  ; palette_color = "maroon" }

let expr_data =
  { Bexp.palette_name = "Expression"
  ; palette_color = "orange" }

let pat_data =
  { Bexp.palette_name = "Pattern"
  ; palette_color = "blue" }

let pat_list_data =
  { Bexp.palette_name = "Patterns..."
  ; palette_color = "green" }

let branch_data =
  { Bexp.palette_name = "Match Cases..."
  ; palette_color = "pink" }

let ty_data =
  { Bexp.palette_name = "Type"
  ; palette_color = "grey" }

let product_ty_data =
  { Bexp.palette_name = "Product Type"
  ; palette_color = "green" }

let constr_data =
  { Bexp.palette_name = "Sum Type"
  ; palette_color = "green" }

let typedef_data =
  { Bexp.palette_name = "Typedef"
  ; palette_color = "green" }

let container = Dom_html.getElementById "workspace-span"

let entry_hole = Bexp.Hole.create get_modul modul_data

let ctx = Bexp.Workspace.create container entry_hole

}}

modul:
  | modul: "module" "where" newline items {{ fun items -> { items } }}
  ;

items:
  | ilet: "let" let_def newline items
    {{ fun (let_def, next) -> ILet(let_def, next) }}
  | ilet_rec: "let rec" let_rec newline items
    {{ fun (let_rec, next) -> ILet_rec(let_rec, next) }}
  | itypedef: "type" typedef newline items
    {{ fun (typedef, next) -> ITypedefs(typedef, next) }}
  ;

ident:
  | local: ?"x" {{ fun s -> Local s }}
  | qual: ?"Prelude" "." ?"x" {{ fun (l, r) -> Qual(l, r) }}
  ;

ty:
  | tapp: ty "<" ty ">" {{ fun (l, r) -> TApp(l, r) }}
  | tarr: "->" {{ fun () -> TArr }}
  | tnominal: "typename" ident {{ fun id -> TNominal id }}
  | tref: "ref" {{ fun () -> TRef }}
  | tvar: "'" ?"a" {{ fun x -> TVar x }}
  ;

typedef:
  | typedef: "type" ?"t" "=" newline tab constr "and" newline typedef
    {{ fun (name, constrs, next) -> Adt(name, constrs, next) }}
  ;

constr:
  | constr: "|" ?"Constr" "of" product_ty newline constr
    {{ fun (constr_name, constr_ty, constr_next) ->
       { constr_name; constr_ty; constr_next } }}
  ;

product_ty:
  | product_ty: ty "*" product_ty
    {{ fun (prod_factor, prod_next) -> { prod_factor; prod_next } }}
  ;

let_def:
  | let_def: pat "=" expr "and" newline let_def
    {{ fun (let_pat, let_expr, let_next) -> { let_pat; let_expr; let_next } }}
  ;

let_rec:
  | let_rec: ?"x" "=" expr "and" newline let_rec
    {{ fun (let_rec_ident, let_rec_expr, let_rec_next) ->
       { let_rec_ident; let_rec_expr; let_rec_next } }}
  ;

expr:
  | eapp: expr "(" expr ")" {{ fun (f, x) -> EApp(f, x) }}
  | eassn: expr ":=" expr {{ fun (l, r) -> EAssign(l, r) }}
  | ecase: "case" expr "of" newline tab branch {{ fun (l, r) -> ECase(l, r) }}
  | econstr: "cons" ident {{ fun id -> EConstr id }}
  | elam: "fun" pat "->" expr {{ fun (p, e) -> ELam(p, e) }}
  | elet: "let" let_def "in" newline expr {{ fun (d, b) -> ELet(d, b) }}
  | elet_rec: "let rec" let_rec "in" newline expr
    {{ fun (d, b) -> ELet_rec(d, b) }}
  | eref: "ref" {{ fun () -> ERef }}
  | eseq: expr ";" expr {{ fun (f, s) -> ESeq(f, s) }}
  | eunit: "()" {{ fun () -> EUnit }}
  | evar: "var" ident {{ fun input -> EVar input }}
  ;

pat:
  | pconstr: ident "(" pat_list ")" {{ fun (c, ps) -> PConstr(c, ps) }}
  | pref: "ref" pat {{ fun p -> PRef p }}
  | punit: "()" {{ fun () -> PWild }}
  | pvar: ?"x" {{ fun input -> PVar input }}
  | pwild: "_" {{ fun () -> PWild }}
  ;

pat_list:
  | plist_cons: pat pat_list {{ fun (h, t) -> PList(h, t) }}
  ;

branch:
  | branch: pat "->" newline tab expr newline branch
    {{ fun (branch_pat, branch_expr, branch_next) ->
       { branch_pat; branch_expr; branch_next } }}
  ;

{{

let compile_ident hole =
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Error (Bexp.Hole hole, "Missing")
  | Some term ->
     match term.Bexp.term with
     | Local input -> Ok (Ast.Internal input#value)
     | Qual(l, r) -> Ok (Ast.External (l#value, r#value))

let rec compile_ty hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Error (Bexp.Hole hole, "Missing")
  | Some term ->
     let%map node =match term.Bexp.term with
       | TApp(f, x) ->
          let%bind f = compile_ty f in
          let%map x = compile_ty x in
          Ast.TApp(f, x)
       | TArr -> Ok Ast.TArrow
       | TNominal id ->
          let%map id = compile_ident id in
          Ast.TNominal id
       | TRef -> Ok Ast.TRef
       | TVar input -> Ok (Ast.TVar input#value)
     in { Ast.ty_ann = Bexp.Hole hole; ty_node = node }

let rec compile_product_ty hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let%bind factor = compile_ty term.Bexp.term.prod_factor in
     let%map next = compile_product_ty term.Bexp.term.prod_next in
     factor :: next

let rec compile_constrs hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let%bind ty = compile_product_ty term.Bexp.term.constr_ty in
     let%map next = compile_constrs term.Bexp.term.constr_next in
     { Ast.datacon_ann = Bexp.Hole hole
     ; datacon_name = term.Bexp.term.constr_name#value
     ; datacon_product = ty } :: next

let rec compile_typedef hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some typedef ->
     match typedef.Bexp.term with
     | Adt(name, def, next) ->
        let%bind def = compile_constrs def in
        let%map next = compile_typedef next in
        { Ast.adt_ann = Bexp.Hole hole
        ; adt_name = name#value
        ; adt_params = []
        ; adt_datacons = def } :: next

let rec compile_pattern hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  let%map node = match hole.Bexp.hole_term with
    | None -> Ok Ast.Wild
    | Some term ->
       match term.Bexp.term with
       | PWild -> Ok Ast.Wild
       | PUnit -> Ok Ast.Unit
       | PVar input -> Ok (Ast.Var (input#value))
       | PRef pat ->
          let%map pat = compile_pattern pat in
          Ast.Deref pat
       | PConstr(id, pats) ->
          let%bind id = compile_ident id in
          let%map pats = compile_patterns pats in
          Ast.Con(id, pats)
  in { Ast.pat_ann = Bexp.Hole hole; pat_node = node }

and compile_patterns hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some { Bexp.term = PList(p, ps); _ }->
     let%bind p = compile_pattern p in
     let%map ps = compile_patterns ps in
     p::ps

let rec compile_branch hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let { branch_pat = pat
         ; branch_expr = expr
         ; branch_next = next } = term.Bexp.term
     in
     let%bind pat = compile_pattern pat in
     let%bind expr = compile_expr expr in
     let%map next = compile_branch next in
     (pat, expr)::next

and compile_expr hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  let%map node = match hole.Bexp.hole_term with
    | None -> Ok Ast.Typed_hole
    | Some term ->
       match term.Bexp.term with
       | EApp(f, x) ->
          let%bind f = compile_expr f in
          let%map x = compile_expr x in
          Ast.App(f, x)
       | EAssign(l, r) ->
          let%bind l = compile_expr l in
          let%map r = compile_expr r in
          Ast.Assign(l, r)
       | ECase(scrut, branches) ->
          let%bind scrut = compile_expr scrut in
          let%map branches = compile_branch branches in
          Ast.Case(scrut, branches)
       | EConstr name ->
          let%map name = compile_ident name in
          Ast.Constr name
       | ELam(pat, body) ->
          let%bind pat = compile_pattern pat in
          let%map body = compile_expr body in
          Ast.Lam((pat, [], body), [])
       | ELet(defs, body) ->
          let%bind defs = compile_let_def defs in
          let%map body = compile_expr body in
          (Ast.Let(defs, body) : _ Ast.expr')
       | ELet_rec(defs, body) ->
          let%bind defs = compile_let_rec defs in
          let%map body = compile_expr body in
          (Ast.Let_rec(defs, body) : _ Ast.expr')
       | ERef -> Ok Ast.Ref
       | ESeq(f, s) ->
          let%bind f = compile_expr f in
          let%map s = compile_expr s in
          Ast.Seq(f, s)
       | EUnit -> Ok (Ast.Lit Literal.Unit)
       | EVar ident ->
          let%map ident = compile_ident ident in
          Ast.Var ident
  in { Ast.expr_ann = Bexp.Hole hole; expr_node = node }

and compile_let_def hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let { let_pat = pat
         ; let_expr = expr
         ; let_next = next } = term.Bexp.term in
     let%bind pat = compile_pattern pat in
     let%bind expr = compile_expr expr in
     let%map next = compile_let_def next in
     { Ast.let_ann = Bexp.Hole hole; let_lhs = pat; let_rhs = expr } :: next

and compile_let_rec hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let { let_rec_ident = ident
         ; let_rec_expr = expr
         ; let_rec_next = next } = term.Bexp.term in
     let%bind expr = compile_expr expr in
     let%map next = compile_let_rec next in
     { Ast.rec_ann = Bexp.Hole hole
     ; rec_lhs = ident#value; rec_rhs = expr } :: next

let rec compile_items hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Ok []
  | Some term ->
     let%bind node, next = match term.Bexp.term with
       | ILet(defs, next) ->
          let%map defs = compile_let_def defs in
          Ast.Let defs, next
       | ILet_rec(defs, next) ->
          let%map defs = compile_let_rec defs in
          Ast.Let_rec defs, next
       | ITypedefs(defs, next) ->
          let%bind defs = compile_typedef defs in
          match defs with
          | [] -> Error (Bexp.Hole hole, "No types")
          | def :: defs ->
             Ok (Ast.Type(def, defs), next)
     in
     let%map next = compile_items next in
     { Ast.item_ann = Bexp.Hole hole; item_node = node }::next

let compile_module hole =
  let open Result.Let_syntax in
  Bexp.Hole.clear_error hole;
  match hole.Bexp.hole_term with
  | None -> Error (Bexp.Hole hole, "No module")
  | Some modl ->
     let%map items = compile_items modl.Bexp.term.items in
     { Ast.file_ann = Bexp.Hole hole
     ; file_imports = []
     ; file_exports = []
     ; file_items = items }

let typecheck_button =
  match
    Dom_html.getElementById "run"
    |> Dom_html.CoerceTo.button |> Js.Opt.to_option
  with
  | None -> assert false
  | Some button -> button

let console = Dom_html.getElementById "console"

let set_console_text str =
  console##.textContent := Js.some (Js.string str)

let append_console_text str =
  let old_str =
    match Js.Opt.to_option (console##.textContent) with
    | None -> ""
    | Some js_str -> Js.to_string js_str
  in set_console_text (old_str ^ str)

let io =
  { Io.putc = (fun _ -> ())
  ; puts = append_console_text }

let error_message =
  "There are errors in the program! Click the highlighted " ^
  "blocks to see the error message."

let () =
  typecheck_button##.onclick :=
    Dom.handler (fun _ ->
        begin match compile_module entry_hole with
        | Error (Bexp.Hole hole, error) ->
           Bexp.Hole.set_error hole (fun () -> set_console_text error);
           set_console_text error_message
        | Ok modl ->
           match
             let prefix = { Qual_id.Prefix.package = ""; path = [] } in
             let packages = Hashtbl.create (module Qual_id.Prefix) in
             Pipeline.compile packages prefix modl
           with
           | Ok (_, code) ->
              set_console_text "";
              let ctx = Eval.create io (Hashtbl.create (module Qual_id.Prefix))
              in
              ignore (Eval.eval ctx code)
           | Error e ->
              let rec f = function
                | Message.And(fst, snd) ->
                   f fst;
                   f snd
                | Message.Diagnostic d ->
                   let Bexp.Hole hole = d.Message.loc in
                   Bexp.Hole.set_error hole
                     (fun () ->
                       let pp = Prettyprint.create () in
                       Prettyprint.print_error pp d.Message.error;
                       set_console_text (Prettyprint.to_string pp))
                | Message.Unreachable str ->
                   Caml.print_endline ("Unreachable " ^ str);
              in
              f e;
              set_console_text error_message
        end;
        Js._false
      )

let () =
  Bexp.Toolbox.set_palette ctx.Bexp.toolbox modul_palette;
  Bexp.Workspace.render ctx

}}
