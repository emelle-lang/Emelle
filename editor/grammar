{{
open Js_of_ocaml
open Blockspec

let doc = Dom_svg.document

let container = Dom_html.getElementById "workspace-span"

let entry_hole = Bexp.Hole.create get_modul modul_data

let ctx = Bexp.Workspace.create container entry_hole

}}

modul:
  | modul: "module" "where" newline
    imports newline
    items {{ fun (imports, items) -> { imports; items } }}
  ;

imports:
  | import: "import" ?"" tab ?"" "as" ?"" newline imports
    {{ fun (import_package, import_path, import_alias, import_next) ->
       { import_package; import_path; import_alias; import_next } }}
  ;

items:
  | ilet: "let" let_def newline items
    {{ fun (let_def, next) -> ILet(let_def, next) }}
  | ilet_rec: "let rec" let_rec newline items
    {{ fun (let_rec, next) -> ILet_rec(let_rec, next) }}
  | itypedef: "type" typedef newline items
    {{ fun (typedef, next) -> ITypedefs(typedef, next) }}
  ;

ident:
  | local: ?"x" {{ fun s -> Local s }}
  | qual: ?"Prelude" "." ?"x" {{ fun (l, r) -> Qual(l, r) }}
  ;

ty:
  | tapp: ty "<" ty ">" {{ fun (l, r) -> TApp(l, r) }}
  | tarr: "->" {{ fun () -> TArr }}
  | tnominal: "typename" ident {{ fun id -> TNominal id }}
  | tref: "ref" {{ fun () -> TRef }}
  | tvar: "'" ?"a" {{ fun x -> TVar x }}
  ;

typedef:
  | typedef: "type" ?"t" tab typeparam "=" newline
    tab constr "and" newline typedef
    {{ fun (name, typeparams, constrs, next) ->
       Adt(name, typeparams, constrs, next) }}
  ;

typeparam:
  | typeparam: "'" ?"a" tab typeparam
    {{ fun (input, next) ->
       { typeparam_name = input; typeparam_next = next } }}
  ;

constr:
  | constr: "|" ?"Constr" "of" product_ty newline constr
    {{ fun (constr_name, constr_ty, constr_next) ->
       { constr_name; constr_ty; constr_next } }}
  ;

product_ty:
  | product_ty: ty "*" product_ty
    {{ fun (prod_factor, prod_next) -> { prod_factor; prod_next } }}
  ;

let_def:
  | let_def: pat "=" expr "and" newline let_def
    {{ fun (let_pat, let_expr, let_next) -> { let_pat; let_expr; let_next } }}
  ;

let_rec:
  | let_rec: ?"x" "=" expr "and" newline let_rec
    {{ fun (let_rec_ident, let_rec_expr, let_rec_next) ->
       { let_rec_ident; let_rec_expr; let_rec_next } }}
  ;

expr:
  | eapp: expr "(" expr ")" {{ fun (f, x) -> EApp(f, x) }}
  | eassn: expr ":=" expr {{ fun (l, r) -> EAssign(l, r) }}
  | ecase: "case" expr "of" newline tab branch {{ fun (l, r) -> ECase(l, r) }}
  | echar: "char '" ?"c" "'" {{ fun input -> EChar input }}
  | econstr: "cons" ident {{ fun id -> EConstr id }}
  | efloat: "dec" ?"0.0" {{ fun input -> EFloat input }}
  | eint: "int" ?"0" {{ fun input -> EInt input }}
  | elam: "fun" pat "->" expr {{ fun (p, e) -> ELam(p, e) }}
  | elet: "let" let_def "in" newline expr {{ fun (d, b) -> ELet(d, b) }}
  | elet_rec: "let rec" let_rec "in" newline expr
      {{ fun (d, b) -> ELet_rec(d, b) }}
  | eop: expr tab ident tab expr {{ fun (lhs, op, rhs) -> EOp(lhs, op, rhs) }}
  | eref: "ref" {{ fun () -> ERef }}
  | eseq: expr ";" newline expr {{ fun (f, s) -> ESeq(f, s) }}
  | estring: "str \"" ?"Hello, world!" "\"" {{ fun input -> EString input }}
  | eunit: "()" {{ fun () -> EUnit }}
  | evar: "var" ident {{ fun input -> EVar input }}
  ;

pat:
  | pconstr: ident "(" pat_list ")" {{ fun (c, ps) -> PConstr(c, ps) }}
  | pref: "ref" pat {{ fun p -> PRef p }}
  | punit: "()" {{ fun () -> PUnit }}
  | pvar: ?"x" {{ fun input -> PVar input }}
  | pwild: "_" {{ fun () -> PWild }}
  ;

pat_list:
  | plist_cons: pat pat_list {{ fun (h, t) -> PList(h, t) }}
  ;

branch:
  | branch: pat "->" newline tab expr newline branch
    {{ fun (branch_pat, branch_expr, branch_next) ->
       { branch_pat; branch_expr; branch_next } }}
  ;

{{
}}
